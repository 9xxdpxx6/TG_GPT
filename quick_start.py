#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è TG_GPT –ø—Ä–æ–µ–∫—Ç–∞
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
"""

import os
import sys
import subprocess
import json
from pathlib import Path

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ!")
        print(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} - OK")
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    required_packages = [
        'torch', 'transformers', 'datasets', 'numpy', 'pandas'
    ]
    
    missing_packages = []
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            print(f"‚ùå {package} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã:")
        print(f"pip install {' '.join(missing_packages)}")
        return False
    
    return True

def check_data_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    data_dir = Path("dataset")
    chats_dir = data_dir / "2025_08_12"
    model_dir = data_dir / "my_dialogpt"
    
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞:")
    
    if not data_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ dataset/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    if not chats_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ dataset/2025_08_12/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("   –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É –∏ –¥–æ–±–∞–≤—å—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ JSON —á–∞—Ç—ã")
        return False
    
    json_files = list(chats_dir.glob("*.json"))
    if not json_files:
        print("‚ùå –í –ø–∞–ø–∫–µ dataset/2025_08_12/ –Ω–µ—Ç JSON —Ñ–∞–π–ª–æ–≤")
        print("   –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —á–∞—Ç—ã –∏–∑ Telegram –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(json_files)} JSON —Ñ–∞–π–ª–æ–≤ —á–∞—Ç–æ–≤")
    
    if not model_dir.exists():
        print("‚ö†Ô∏è  –ü–∞–ø–∫–∞ —Å –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ: cd trainer && python train_model_locally_fixed.py")
        return False
    
    print("‚úÖ –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞")
    return True

def prepare_dataset():
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
    print("\nüîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
    
    script_path = Path("dataset/prepare_training_dataset.py")
    if not script_path.exists():
        print("‚ùå –°–∫—Ä–∏–ø—Ç prepare_training_dataset.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        result = subprocess.run([
            sys.executable, str(script_path)
        ], capture_output=True, text=True, cwd="dataset")
        
        if result.returncode == 0:
            print("‚úÖ –î–∞—Ç–∞—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞—Ç–∞—Å–µ—Ç–∞: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_model():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    
    script_path = Path("core/generator.py")
    if not script_path.exists():
        print("‚ùå –°–∫—Ä–∏–ø—Ç generator.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        test_script = """
import sys
sys.path.append('core')
from generator import MessageGenerator

try:
    generator = MessageGenerator()
    response = generator.generate_response(["–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"])
    print(f"‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! –û—Ç–≤–µ—Ç: {response}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
"""
        
        with open("test_model.py", "w", encoding="utf-8") as f:
            f.write(test_script)
        
        result = subprocess.run([
            sys.executable, "test_model.py"
        ], capture_output=True, text=True)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove("test_model.py")
        
        if result.returncode == 0:
            print("‚úÖ –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ TG_GPT - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    if not check_python_version():
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        print("\nüí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("pip install -r requirements.txt")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    if not check_data_files():
        return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
    if not prepare_dataset():
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
    if not test_model():
        return
    
    print("\nüéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ core/generator.py")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä: python core/generator.py")
    print("3. –î–ª—è Telegram –±–æ—Ç–∞ —Å–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python bot.py")
    
    print("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
    print("- README.md - –æ—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    print("- trainer/README.md - –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    print("- core/README.md - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞")

if __name__ == "__main__":
    main()
